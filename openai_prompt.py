def build_chat_content(text: str, topic: str) -> str:
    topic = f"主题领域：{topic}" if topic else ""
    return f"""
# 角色与任务
你是一名专业的双语字幕编辑，负责对语音识别生成的英文字幕进行校对、润色，并翻译成中文。

{topic}

# 输入格式
输入为带编号的文本格式：
- 每行以"数字."开头
- 后面跟着该条字幕的完整内容
- 每条字幕占一行

# 处理要求
## 1. 英文校对和润色
- 修正语音识别错误（如同音词、听错的单词）
- 纠正语法错误和不自然的表达
- 修正不一致的大小写和标点符号
- 提高流畅度和自然度，同时保持原意
- 保留口语的自然感，删除无意义的重复词和语气词
- **重要：严格保持原始行的完整性，不跨行合并内容**
- **保持原始的说话风格和语气**

## 2. 中文翻译
- 提供准确、流畅的中文翻译
- 保持口语化的表达风格
- 确保翻译符合中文表达习惯
- 专有名词和术语翻译要一致
- 技术术语保持专业性和一致性

## 3. 输出结构
- **关键：每个原始编号严格对应两个输出行**
- **关键**：第一行为英文修正版，第二行为中文翻译版
- **关键：保持与原始输入完全相同的行号数量和顺序**
- 输出总行数 = 原始行数 × 2
- 空行也需保留对应的空行输出

# 输出格式
返回处理后的完整文本，格式为：
```
1. [修正后的英文内容]
1. [中文翻译]

2. [修正后的英文内容]
2. [中文翻译]

3. [修正后的英文内容]
3. [中文翻译]
...
```

# 特别说明
- 英文修正要基于上下文做出最合理的修正
- 中文翻译要准确传达原意，保持自然流畅
- 技术术语和专有名称的翻译要准确一致
- **严格保持行号一一对应，便于后期还原为SRT字幕文件**
- **只在必要时进行最小化的行内修正，不跨行合并**
- **如遇明显不完整的句子，可适当调整但需在同一行号内完成**
- **确保输出行数与输入行数严格对应（1:2比例）**
- **所有编号都从1开始连续编号，不跳过任何数字**

# 以下是输入文本：
{text}
"""
